Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbours of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.

Return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.

Binary matrix is a matrix with all cells equal to 0 or 1 only.

Zero matrix is a matrix with all cells equal to 0.

 

Example 1:


Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.
Example 2:

Input: mat = [[0]]
Output: 0
Explanation: Given matrix is a zero matrix. We don't need to change it.
Example 3:

Input: mat = [[1,1,1],[1,0,1],[0,0,0]]
Output: 6
Example 4:

Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: Given matrix can't be a zero matrix
 

Constraints:

m == mat.length
n == mat[0].length
1 <= m <= 3
1 <= n <= 3
mat[i][j] is 0 or 1.


O(???) time, O(???) space
class Solution(object):
    def minFlips(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: int
        """
        
        self.m, self.n = len(mat), len(mat[0])
        
        diff = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        def valid(mat):
            for i in range(self.m):
                for j in range(self.n):
                    if mat[i][j] == 1:
                        return False
            
            return True
        
        def encode(mat):
            res = 0
            for i in range(self.m):
                for j in range(self.n):
                    res = (res<<1)+mat[i][j]
            
            return res
        
        def decode(num):
            mat = [[0]*self.n for _ in range(self.m)]
            
            while num:
                for i in range(self.m):
                    for j in range(self.n):
                        if num&1 == 1:
                            mat[i][j] = 1
                        
                        num >>= 1
            
            return mat
        
        if valid(mat):
            return 0
        
        my_set = set()
        
        code = encode(mat)
        
        my_set.add(code)
        my_queue = collections.deque([(code, 0)])
        
        while my_queue:
            code, count = my_queue.popleft()
            
            mat = decode(code)
            
            for i in range(self.m):
                for j in range(self.n):
                    mat[i][j] = 1-mat[i][j]
                    
                    for d in diff:
                        new_i, new_j = i+d[0], j+d[1]
                        if 0 <= new_i < self.m and 0 <= new_j < self.n:
                            mat[new_i][new_j] = 1-mat[new_i][new_j]
                    
                    if valid(mat):
                        return count+1
                    
                    new_code = encode(mat)
                    
                    if new_code not in my_set:
                        my_set.add(new_code)
                        
                        my_queue.append((new_code, count+1))
                    
                    mat[i][j] = 1-mat[i][j]
                    
                    for d in diff:
                        new_i, new_j = i+d[0], j+d[1]
                        if 0 <= new_i < self.m and 0 <= new_j < self.n:
                            mat[new_i][new_j] = 1-mat[new_i][new_j]
        
        return -1
