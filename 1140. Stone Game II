Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 

Alex and Lee take turns, with Alex starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.

 

Example 1:

Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes 2 piles again. Alex can get 2 + 4 + 4 = 10 piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 
 

Constraints:

1 <= piles.length <= 100
1 <= piles[i] <= 10 ^ 4


O(???) time, O(???) space
class Solution(object):
    def stoneGameII(self, piles):
        """
        :type piles: List[int]
        :rtype: int
        """
        
        sums = [0]*len(piles)
        
        cur = 0
        for i in range(len(piles)-1, -1, -1):
            cur += piles[i]
            sums[i] = cur
        
        dp = [[0]*len(piles) for _ in range(len(piles))]
        
        def helper(i, m):
            if dp[i][m]:
                return dp[i][m]
            
            if m*2 >= len(piles)-i:
                return sums[i]
            
            min_val = sys.maxint
            for x in range(1, 2*m+1):
                min_val = min(min_val, helper(i+x, max(m, x)))
            
            dp[i][m] = sums[i]-min_val
            
            return sums[i]-min_val
        
        return helper(0, 1)
